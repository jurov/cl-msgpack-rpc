(in-package :cl-neovim)

(defun call/a (inst method &rest params)
  (declare (ignore inst method params))
  (error "naht implement"))

(defun call/s (inst method &rest params)
  (let ((messagepack:*extended-types* *ext-type-list*)
        (messagepack:*lookup-table* *ext-lookup-table*)))
  (apply #'msgpack-rpc::naive-rpcall inst method params))

(defparameter *nvim-instance* nil)

;;snatched from cl-neovim :>
;;; File automatically generated by (nvim::generate-api)


(DEFUN BUFFER-OFFSET
       (BUFFER INDEX &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_offset" BUFFER INDEX))

(DEFUN BUFFER-OFFSET/A
       (BUFFER INDEX &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_offset" BUFFER INDEX))


(DEFUN BUFFER-LOADED-P
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_is_loaded" BUFFER))

(DEFUN BUFFER-LOADED-P/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_is_loaded" BUFFER))


(DEFUN BUFFER-CLEAR-NAMESPACE
       (BUFFER NS-ID LINE-START LINE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_clear_namespace" BUFFER NS-ID
                    LINE-START LINE-END))

(DEFUN BUFFER-CLEAR-NAMESPACE/A
       (BUFFER NS-ID LINE-START LINE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_clear_namespace" BUFFER NS-ID
                    LINE-START LINE-END))


(DEFUN (SETF BUFFER-VIRTUAL-TEXT)
       (OPTS BUFFER NS-ID LINE CHUNKS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((CHUNKS (OR CHUNKS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_set_virtual_text" BUFFER
                      NS-ID LINE CHUNKS OPTS)))

(DEFUN (SETF BUFFER-VIRTUAL-TEXT/A)
       (OPTS BUFFER NS-ID LINE CHUNKS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((CHUNKS (OR CHUNKS #())))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_set_virtual_text" BUFFER
                      NS-ID LINE CHUNKS OPTS)))


(DEFUN CREATE-NAMESPACE
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_create_namespace" NAME))

(DEFUN CREATE-NAMESPACE/A
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_create_namespace" NAME))


(DEFUN NAMESPACES (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_namespaces"))

(DEFUN NAMESPACES/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_namespaces"))


(DEFUN (SETF WINDOW-BUFFER)
       (BUFFER WINDOW
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_set_buf" WINDOW BUFFER))

(DEFUN (SETF WINDOW-BUFFER/A)
       (BUFFER WINDOW
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_set_buf" WINDOW BUFFER))


(DEFUN BUFFER-ATTACH
       (BUFFER SEND-BUFFER OPTS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((SEND-BUFFER (OR SEND-BUFFER :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_attach" BUFFER SEND-BUFFER
                      OPTS)))

(DEFUN BUFFER-ATTACH/A
       (BUFFER SEND-BUFFER OPTS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((SEND-BUFFER (OR SEND-BUFFER :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_attach" BUFFER SEND-BUFFER
                      OPTS)))


(DEFUN BUFFER-DETACH
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_detach" BUFFER))

(DEFUN BUFFER-DETACH/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_detach" BUFFER))


(DEFUN BUFFER-COMMANDS
       (BUFFER OPTS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_commands" BUFFER OPTS))

(DEFUN BUFFER-COMMANDS/A
       (BUFFER OPTS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_commands" BUFFER OPTS))

;;Shortcut with unpacked args
(DEFUN CALL-DICT-FUN
       (DICT FN &REST ARGS)
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM:*NVIM-INSTANCE* "nvim_call_dict_function" DICT FN ARGS)))


(DEFUN CALL-DICT-FUNCTION
       (DICT FN ARGS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_call_dict_function" DICT FN
                      ARGS)))

(DEFUN CALL-DICT-FUNCTION/A
       (DICT FN ARGS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_call_dict_function" DICT FN
                      ARGS)))


(DEFUN COMMANDS
       (OPTS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_commands" OPTS))

(DEFUN COMMANDS/A
       (OPTS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_commands" OPTS))


(DEFUN (SETF CLIENT-INFO)
       (ATTRIBUTES NAME VERSION TYPE METHODS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_client_info" NAME VERSION
                    TYPE METHODS ATTRIBUTES))

(DEFUN (SETF CLIENT-INFO/A)
       (ATTRIBUTES NAME VERSION TYPE METHODS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_client_info" NAME VERSION
                    TYPE METHODS ATTRIBUTES))


(DEFUN CHAN-INFO
       (CHAN &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_chan_info" CHAN))

(DEFUN CHAN-INFO/A
       (CHAN &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_chan_info" CHAN))


(DEFUN CHANS (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_list_chans"))

(DEFUN CHANS/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_list_chans"))


(DEFUN PARSE-EXPRESSION
       (EXPR FLAGS HIGHLIGHT
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((HIGHLIGHT (OR HIGHLIGHT :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_parse_expression" EXPR FLAGS
                      HIGHLIGHT)))

(DEFUN PARSE-EXPRESSION/A
       (EXPR FLAGS HIGHLIGHT
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((HIGHLIGHT (OR HIGHLIGHT :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_parse_expression" EXPR FLAGS
                      HIGHLIGHT)))


(DEFUN UIS (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_list_uis"))

(DEFUN UIS/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_list_uis"))


(DEFUN PROC-CHILDREN
       (PID &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_proc_children" PID))

(DEFUN PROC-CHILDREN/A
       (PID &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_proc_children" PID))


(DEFUN PROC (PID &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_proc" PID))

(DEFUN PROC/A (PID &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_proc" PID))


(DEFUN BUFFER-KEYMAP
       (BUFFER MODE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_keymap" BUFFER MODE))

(DEFUN BUFFER-KEYMAP/A
       (BUFFER MODE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_keymap" BUFFER MODE))


(DEFUN HL-BY-NAME
       (NAME RGB &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((RGB (OR RGB :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_hl_by_name" NAME RGB)))

(DEFUN HL-BY-NAME/A
       (NAME RGB &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((RGB (OR RGB :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_hl_by_name" NAME RGB)))


(DEFUN HL-BY-ID
       (HL-ID RGB &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((RGB (OR RGB :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_hl_by_id" HL-ID RGB)))

(DEFUN HL-BY-ID/A
       (HL-ID RGB &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((RGB (OR RGB :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_hl_by_id" HL-ID RGB)))

;;Shortcut with unpacked args
(DEFUN EXEC-LUA
       (CODE &REST ARGS)
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM:*NVIM-INSTANCE* "nvim_execute_lua" CODE ARGS)))

(DEFUN EXECUTE-LUA
       (CODE ARGS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_execute_lua" CODE ARGS)))

(DEFUN EXECUTE-LUA/A
       (CODE ARGS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_execute_lua" CODE ARGS)))


(DEFUN KEYMAP (MODE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_keymap" MODE))

(DEFUN KEYMAP/A
       (MODE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_keymap" MODE))


(DEFUN BUFFER-CHANGEDTICK
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_changedtick" BUFFER))

(DEFUN BUFFER-CHANGEDTICK/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_changedtick" BUFFER))


(DEFUN MODE (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_mode"))

(DEFUN MODE/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_mode"))


(DEFUN BUFFER-LINE-COUNT
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_line_count" BUFFER))

(DEFUN BUFFER-LINE-COUNT/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_line_count" BUFFER))


(DEFUN BUFFER-LINES
       (BUFFER START END STRICT-INDEXING
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((STRICT-INDEXING (OR STRICT-INDEXING :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_lines" BUFFER START END
                      STRICT-INDEXING)))

(DEFUN BUFFER-LINES/A
       (BUFFER START END STRICT-INDEXING
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((STRICT-INDEXING (OR STRICT-INDEXING :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_lines" BUFFER START END
                      STRICT-INDEXING)))


(DEFUN (SETF BUFFER-LINES)
       (REPLACEMENT BUFFER START END STRICT-INDEXING
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((STRICT-INDEXING (OR STRICT-INDEXING :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_set_lines" BUFFER START END
                      STRICT-INDEXING REPLACEMENT)))

(DEFUN (SETF BUFFER-LINES/A)
       (REPLACEMENT BUFFER START END STRICT-INDEXING
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((STRICT-INDEXING (OR STRICT-INDEXING :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_set_lines" BUFFER START END
                      STRICT-INDEXING REPLACEMENT)))


(DEFUN BUFFER-VAR
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_var" BUFFER NAME))

(DEFUN BUFFER-VAR/A
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_var" BUFFER NAME))


(DEFUN (SETF BUFFER-VAR)
       (VALUE BUFFER NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_set_var" BUFFER NAME VALUE))

(DEFUN (SETF BUFFER-VAR/A)
       (VALUE BUFFER NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_set_var" BUFFER NAME VALUE))


(DEFUN BUFFER-DEL-VAR
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_del_var" BUFFER NAME))

(DEFUN BUFFER-DEL-VAR/A
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_del_var" BUFFER NAME))


(DEFUN BUFFER-OPTION
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_option" BUFFER NAME))

(DEFUN BUFFER-OPTION/A
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_option" BUFFER NAME))


(DEFUN (SETF BUFFER-OPTION)
       (VALUE BUFFER NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_set_option" BUFFER NAME
                    VALUE))

(DEFUN (SETF BUFFER-OPTION/A)
       (VALUE BUFFER NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_set_option" BUFFER NAME
                    VALUE))


(DEFUN BUFFER-NUMBER
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_number" BUFFER))

(DEFUN BUFFER-NUMBER/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_number" BUFFER))


(DEFUN BUFFER-NAME
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_name" BUFFER))

(DEFUN BUFFER-NAME/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_name" BUFFER))


(DEFUN (SETF BUFFER-NAME)
       (NAME BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_set_name" BUFFER NAME))

(DEFUN (SETF BUFFER-NAME/A)
       (NAME BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_set_name" BUFFER NAME))


(DEFUN BUFFER-VALID-P
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_is_valid" BUFFER))

(DEFUN BUFFER-VALID-P/A
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_is_valid" BUFFER))


(DEFUN BUFFER-MARK
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_get_mark" BUFFER NAME))

(DEFUN BUFFER-MARK/A
       (BUFFER NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_get_mark" BUFFER NAME))


(DEFUN BUFFER-ADD-HIGHLIGHT
       (BUFFER NS-ID HL-GROUP LINE COL-START COL-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_add_highlight" BUFFER NS-ID
                    HL-GROUP LINE COL-START COL-END))

(DEFUN BUFFER-ADD-HIGHLIGHT/A
       (BUFFER NS-ID HL-GROUP LINE COL-START COL-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_add_highlight" BUFFER NS-ID
                    HL-GROUP LINE COL-START COL-END))


(DEFUN BUFFER-CLEAR-HIGHLIGHT
       (BUFFER NS-ID LINE-START LINE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_buf_clear_highlight" BUFFER NS-ID
                    LINE-START LINE-END))

(DEFUN BUFFER-CLEAR-HIGHLIGHT/A
       (BUFFER NS-ID LINE-START LINE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_buf_clear_highlight" BUFFER NS-ID
                    LINE-START LINE-END))


(DEFUN TABPAGE-WINDOWS
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_list_wins" TABPAGE))

(DEFUN TABPAGE-WINDOWS/A
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_list_wins" TABPAGE))


(DEFUN TABPAGE-VAR
       (TABPAGE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_get_var" TABPAGE NAME))

(DEFUN TABPAGE-VAR/A
       (TABPAGE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_get_var" TABPAGE NAME))


(DEFUN (SETF TABPAGE-VAR)
       (VALUE TABPAGE NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_set_var" TABPAGE NAME
                    VALUE))

(DEFUN (SETF TABPAGE-VAR/A)
       (VALUE TABPAGE NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_set_var" TABPAGE NAME
                    VALUE))


(DEFUN TABPAGE-DEL-VAR
       (TABPAGE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_del_var" TABPAGE NAME))

(DEFUN TABPAGE-DEL-VAR/A
       (TABPAGE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_del_var" TABPAGE NAME))


(DEFUN TABPAGE-WINDOW
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_get_win" TABPAGE))

(DEFUN TABPAGE-WINDOW/A
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_get_win" TABPAGE))


(DEFUN TABPAGE-NUMBER
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_get_number" TABPAGE))

(DEFUN TABPAGE-NUMBER/A
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_get_number" TABPAGE))


(DEFUN TABPAGE-VALID-P
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_tabpage_is_valid" TABPAGE))

(DEFUN TABPAGE-VALID-P/A
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_tabpage_is_valid" TABPAGE))


(DEFUN UI-ATTACH
       (WIDTH HEIGHT OPTIONS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_ui_attach" WIDTH HEIGHT OPTIONS))

(DEFUN UI-ATTACH/A
       (WIDTH HEIGHT OPTIONS
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_ui_attach" WIDTH HEIGHT OPTIONS))


(DEFUN UI-DETACH (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_ui_detach"))

(DEFUN UI-DETACH/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_ui_detach"))


(DEFUN UI-TRY-RESIZE
       (WIDTH HEIGHT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_ui_try_resize" WIDTH HEIGHT))

(DEFUN UI-TRY-RESIZE/A
       (WIDTH HEIGHT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_ui_try_resize" WIDTH HEIGHT))


(DEFUN (SETF UI-OPTION)
       (VALUE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_ui_set_option" NAME VALUE))

(DEFUN (SETF UI-OPTION/A)
       (VALUE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_ui_set_option" NAME VALUE))


(DEFUN COMMAND
       (COMMAND &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_command" COMMAND))

(DEFUN COMMAND/A
       (COMMAND &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_command" COMMAND))


(DEFUN FEEDKEYS
       (KEYS MODE ESCAPE-CSI
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ESCAPE-CSI (OR ESCAPE-CSI :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_feedkeys" KEYS MODE
                      ESCAPE-CSI)))

(DEFUN FEEDKEYS/A
       (KEYS MODE ESCAPE-CSI
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ESCAPE-CSI (OR ESCAPE-CSI :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_feedkeys" KEYS MODE
                      ESCAPE-CSI)))


(DEFUN INPUT (KEYS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_input" KEYS))

(DEFUN INPUT/A (KEYS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_input" KEYS))


(DEFUN REPLACE-TERMCODES
       (STR FROM-PART DO-LT SPECIAL
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((FROM-PART (OR FROM-PART :FALSE))
        (DO-LT (OR DO-LT :FALSE))
        (SPECIAL (OR SPECIAL :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_replace_termcodes" STR
                      FROM-PART DO-LT SPECIAL)))

(DEFUN REPLACE-TERMCODES/A
       (STR FROM-PART DO-LT SPECIAL
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((FROM-PART (OR FROM-PART :FALSE))
        (DO-LT (OR DO-LT :FALSE))
        (SPECIAL (OR SPECIAL :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_replace_termcodes" STR
                      FROM-PART DO-LT SPECIAL)))


(DEFUN COMMAND-OUTPUT
       (COMMAND &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_command_output" COMMAND))

(DEFUN COMMAND-OUTPUT/A
       (COMMAND &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_command_output" COMMAND))


(DEFUN EVAL/S (EXPR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_eval" EXPR))

(DEFUN EVAL/A (EXPR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_eval" EXPR))

;;Shortcut with unpacked args
(DEFUN CALL-FUN
       (FN &REST ARGS)
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM:*NVIM-INSTANCE* "nvim_call_function" FN ARGS)))

(DEFUN CALL-FUNCTION
       (FN ARGS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_call_function" FN ARGS)))

(DEFUN CALL-FUNCTION/A
       (FN ARGS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((ARGS (OR ARGS #())))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_call_function" FN ARGS)))


(DEFUN STRWIDTH
       (TEXT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_strwidth" TEXT))

(DEFUN STRWIDTH/A
       (TEXT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_strwidth" TEXT))


(DEFUN RUNTIME-PATHS
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_list_runtime_paths"))

(DEFUN RUNTIME-PATHS/A
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_list_runtime_paths"))


(DEFUN (SETF CURRENT-DIR)
       (DIR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_current_dir" DIR))

(DEFUN (SETF CURRENT-DIR/A)
       (DIR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_current_dir" DIR))


(DEFUN CURRENT-LINE (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_current_line"))

(DEFUN CURRENT-LINE/A
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_current_line"))


(DEFUN (SETF CURRENT-LINE)
       (LINE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_current_line" LINE))

(DEFUN (SETF CURRENT-LINE/A)
       (LINE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_current_line" LINE))


(DEFUN DEL-CURRENT-LINE
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_del_current_line"))

(DEFUN DEL-CURRENT-LINE/A
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_del_current_line"))


(DEFUN VAR (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_var" NAME))

(DEFUN VAR/A (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_var" NAME))


(DEFUN (SETF VAR)
       (VALUE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_var" NAME VALUE))

(DEFUN (SETF VAR/A)
       (VALUE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_var" NAME VALUE))


(DEFUN DEL-VAR (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_del_var" NAME))

(DEFUN DEL-VAR/A
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_del_var" NAME))


(DEFUN VVAR (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_vvar" NAME))

(DEFUN VVAR/A (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_vvar" NAME))


(DEFUN OPTION (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_option" NAME))

(DEFUN OPTION/A
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_option" NAME))


(DEFUN (SETF OPTION)
       (VALUE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_option" NAME VALUE))

(DEFUN (SETF OPTION/A)
       (VALUE NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_option" NAME VALUE))


(DEFUN OUT-WRITE
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_out_write" STR))

(DEFUN OUT-WRITE/A
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_out_write" STR))


(DEFUN ERR-WRITE
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_err_write" STR))

(DEFUN ERR-WRITE/A
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_err_write" STR))


(DEFUN ERR-WRITELN
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_err_writeln" STR))

(DEFUN ERR-WRITELN/A
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_err_writeln" STR))


(DEFUN BUFFERS (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_list_bufs"))

(DEFUN BUFFERS/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_list_bufs"))


(DEFUN CURRENT-BUFFER
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_current_buf"))

(DEFUN CURRENT-BUFFER/A
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_current_buf"))


(DEFUN (SETF CURRENT-BUFFER)
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_current_buf" BUFFER))

(DEFUN (SETF CURRENT-BUFFER/A)
       (BUFFER &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_current_buf" BUFFER))


(DEFUN WINDOWS (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_list_wins"))

(DEFUN WINDOWS/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_list_wins"))


(DEFUN CURRENT-WINDOW
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_current_win"))

(DEFUN CURRENT-WINDOW/A
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_current_win"))


(DEFUN (SETF CURRENT-WINDOW)
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_current_win" WINDOW))

(DEFUN (SETF CURRENT-WINDOW/A)
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_current_win" WINDOW))


(DEFUN TABPAGES (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_list_tabpages"))

(DEFUN TABPAGES/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_list_tabpages"))


(DEFUN CURRENT-TABPAGE
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_current_tabpage"))

(DEFUN CURRENT-TABPAGE/A
       (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_current_tabpage"))


(DEFUN (SETF CURRENT-TABPAGE)
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_set_current_tabpage" TABPAGE))

(DEFUN (SETF CURRENT-TABPAGE/A)
       (TABPAGE &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_set_current_tabpage" TABPAGE))


(DEFUN SUBSCRIBE
       (EVENT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_subscribe" EVENT))

(DEFUN SUBSCRIBE/A
       (EVENT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_subscribe" EVENT))


(DEFUN UNSUBSCRIBE
       (EVENT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_unsubscribe" EVENT))

(DEFUN UNSUBSCRIBE/A
       (EVENT &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_unsubscribe" EVENT))


(DEFUN COLOR-BY-NAME
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_color_by_name" NAME))

(DEFUN COLOR-BY-NAME/A
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_color_by_name" NAME))


(DEFUN COLOR-MAP (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_color_map"))

(DEFUN COLOR-MAP/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_color_map"))


(DEFUN API-INFO (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_get_api_info"))

(DEFUN API-INFO/A (&OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_get_api_info"))


(DEFUN CALL-ATOMIC
       (CALLS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((CALLS (OR CALLS #())))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_call_atomic" CALLS)))

(DEFUN CALL-ATOMIC/A
       (CALLS &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((CALLS (OR CALLS #())))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_call_atomic" CALLS)))


(DEFUN WINDOW-BUFFER
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_buf" WINDOW))

(DEFUN WINDOW-BUFFER/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_buf" WINDOW))


(DEFUN WINDOW-CURSOR
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_cursor" WINDOW))

(DEFUN WINDOW-CURSOR/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_cursor" WINDOW))


(DEFUN (SETF WINDOW-CURSOR)
       (POS WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_set_cursor" WINDOW POS))

(DEFUN (SETF WINDOW-CURSOR/A)
       (POS WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_set_cursor" WINDOW POS))


(DEFUN WINDOW-HEIGHT
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_height" WINDOW))

(DEFUN WINDOW-HEIGHT/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_height" WINDOW))


(DEFUN (SETF WINDOW-HEIGHT)
       (HEIGHT WINDOW
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_set_height" WINDOW HEIGHT))

(DEFUN (SETF WINDOW-HEIGHT/A)
       (HEIGHT WINDOW
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_set_height" WINDOW HEIGHT))


(DEFUN WINDOW-WIDTH
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_width" WINDOW))

(DEFUN WINDOW-WIDTH/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_width" WINDOW))


(DEFUN (SETF WINDOW-WIDTH)
       (WIDTH WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_set_width" WINDOW WIDTH))

(DEFUN (SETF WINDOW-WIDTH/A)
       (WIDTH WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_set_width" WINDOW WIDTH))


(DEFUN WINDOW-VAR
       (WINDOW NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_var" WINDOW NAME))

(DEFUN WINDOW-VAR/A
       (WINDOW NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_var" WINDOW NAME))


(DEFUN (SETF WINDOW-VAR)
       (VALUE WINDOW NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_set_var" WINDOW NAME VALUE))

(DEFUN (SETF WINDOW-VAR/A)
       (VALUE WINDOW NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_set_var" WINDOW NAME VALUE))


(DEFUN WINDOW-DEL-VAR
       (WINDOW NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_del_var" WINDOW NAME))

(DEFUN WINDOW-DEL-VAR/A
       (WINDOW NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_del_var" WINDOW NAME))


(DEFUN WINDOW-OPTION
       (WINDOW NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_option" WINDOW NAME))

(DEFUN WINDOW-OPTION/A
       (WINDOW NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_option" WINDOW NAME))


(DEFUN (SETF WINDOW-OPTION)
       (VALUE WINDOW NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_set_option" WINDOW NAME
                    VALUE))

(DEFUN (SETF WINDOW-OPTION/A)
       (VALUE WINDOW NAME
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_set_option" WINDOW NAME
                    VALUE))


(DEFUN WINDOW-POSITION
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_position" WINDOW))

(DEFUN WINDOW-POSITION/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_position" WINDOW))


(DEFUN WINDOW-TABPAGE
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_tabpage" WINDOW))

(DEFUN WINDOW-TABPAGE/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_tabpage" WINDOW))


(DEFUN WINDOW-NUMBER
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_get_number" WINDOW))

(DEFUN WINDOW-NUMBER/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_get_number" WINDOW))


(DEFUN WINDOW-VALID-P
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "nvim_win_is_valid" WINDOW))

(DEFUN WINDOW-VALID-P/A
       (WINDOW &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "nvim_win_is_valid" WINDOW))


(DEFUN BUFFER-LINE
       (BUFFER INDEX &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "buffer_get_line" BUFFER INDEX))

(DEFUN BUFFER-LINE/A
       (BUFFER INDEX &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "buffer_get_line" BUFFER INDEX))


(DEFUN (SETF BUFFER-LINE)
       (LINE BUFFER INDEX
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "buffer_set_line" BUFFER INDEX LINE))

(DEFUN (SETF BUFFER-LINE/A)
       (LINE BUFFER INDEX
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "buffer_set_line" BUFFER INDEX LINE))


(DEFUN BUFFER-DEL-LINE
       (BUFFER INDEX &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "buffer_del_line" BUFFER INDEX))

(DEFUN BUFFER-DEL-LINE/A
       (BUFFER INDEX &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "buffer_del_line" BUFFER INDEX))


(DEFUN BUFFER-LINE-SLICE
       (BUFFER START END INCLUDE-START INCLUDE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((INCLUDE-START (OR INCLUDE-START :FALSE))
        (INCLUDE-END (OR INCLUDE-END :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "buffer_get_line_slice" BUFFER START
                      END INCLUDE-START INCLUDE-END)))

(DEFUN BUFFER-LINE-SLICE/A
       (BUFFER START END INCLUDE-START INCLUDE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((INCLUDE-START (OR INCLUDE-START :FALSE))
        (INCLUDE-END (OR INCLUDE-END :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "buffer_get_line_slice" BUFFER START
                      END INCLUDE-START INCLUDE-END)))


(DEFUN (SETF BUFFER-LINE-SLICE)
       (REPLACEMENT BUFFER START END INCLUDE-START INCLUDE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((INCLUDE-START (OR INCLUDE-START :FALSE))
        (INCLUDE-END (OR INCLUDE-END :FALSE)))
    (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "buffer_set_line_slice" BUFFER START
                      END INCLUDE-START INCLUDE-END REPLACEMENT)))

(DEFUN (SETF BUFFER-LINE-SLICE/A)
       (REPLACEMENT BUFFER START END INCLUDE-START INCLUDE-END
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (LET ((INCLUDE-START (OR INCLUDE-START :FALSE))
        (INCLUDE-END (OR INCLUDE-END :FALSE)))
    (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "buffer_set_line_slice" BUFFER START
                      END INCLUDE-START INCLUDE-END REPLACEMENT)))


(DEFUN BUFFER-INSERT
       (BUFFER LNUM LINES
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "buffer_insert" BUFFER LNUM LINES))

(DEFUN BUFFER-INSERT/A
       (BUFFER LNUM LINES
        &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "buffer_insert" BUFFER LNUM LINES))


(DEFUN CHANGE-DIRECTORY
       (DIR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "vim_change_directory" DIR))

(DEFUN CHANGE-DIRECTORY/A
       (DIR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "vim_change_directory" DIR))


(DEFUN REPORT-ERROR
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "vim_report_error" STR))

(DEFUN REPORT-ERROR/A
       (STR &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "vim_report_error" STR))


(DEFUN NAME-TO-COLOR
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/S CL-NEOVIM::INSTANCE "vim_name_to_color" NAME))

(DEFUN NAME-TO-COLOR/A
       (NAME &OPTIONAL (CL-NEOVIM::INSTANCE CL-NEOVIM:*NVIM-INSTANCE*))
  (CL-NEOVIM:CALL/A CL-NEOVIM::INSTANCE "vim_name_to_color" NAME))



